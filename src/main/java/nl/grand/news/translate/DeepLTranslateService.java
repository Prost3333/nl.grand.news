package nl.grand.news.translate;
import jakarta.json.*;
import lombok.*;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
@Data
@AllArgsConstructor
public class DeepLTranslateService {
    private static final String DEEPL_API_URL = "https://api-free.deepl.com/v2/translate";
    private final String apiKey= "0d9bdfca-77b1-4ecd-9c0c-976ffb2054c0:fx";

    public String translateText(String text, String sourceLang, String targetLang) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if (text == null || text.isBlank()) {
                System.err.println("‚ùó –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!");
                return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)";
            }

            // –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –ª–∏–º–∏—Ç–∞ DeepL (5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)
            if (text.length() > 4500) {
                text = text.substring(0, 4500);
                System.out.println("‚úÇÔ∏è –¢–µ–∫—Å—Ç —É—Å–µ—á—ë–Ω –¥–æ 4500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
            }

            System.out.println("üî§ –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL:");
            System.out.println("FROM: " + sourceLang + " TO: " + targetLang);

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            String postData = "text=" + URLEncoder.encode(text, StandardCharsets.UTF_8) +
                    "&target_lang=" + targetLang.toUpperCase() +
                    (sourceLang != null && !sourceLang.isEmpty() ?
                            "&source_lang=" + sourceLang.toUpperCase() : "");

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            URL url = new URL(DEEPL_API_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Authorization", "DeepL-Auth-Key " + apiKey);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.setDoOutput(true);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = postData.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            int responseCode = conn.getResponseCode();
            if (responseCode != 200) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: " + responseCode);
                return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (" + responseCode + ")";
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ JSON-–æ—Ç–≤–µ—Ç–∞
            try (InputStream is = conn.getInputStream();
                 JsonReader jsonReader = Json.createReader(is)) {

                JsonObject jsonResponse = jsonReader.readObject();
                JsonArray translations = jsonResponse.getJsonArray("translations");
                if (translations != null && !translations.isEmpty()) {
                    return translations.getJsonObject(0).getString("text");
                }
                return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞";
            }

        } catch (IOException e) {
            e.printStackTrace();
            return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: " + e.getMessage();
        }
    }
}
