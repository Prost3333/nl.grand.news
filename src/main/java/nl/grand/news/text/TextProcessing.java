package nl.grand.news.text;

import lombok.AllArgsConstructor;
import lombok.Data;
import nl.grand.news.translate.DeepLTranslateService;
import nl.grand.news.translate.TranslateService;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.HashSet;
import java.util.Set;

@Data
@AllArgsConstructor
public class TextProcessing {
    public NewsHandler newsHandler;
    public TextProcessing(){
        this.newsHandler = new NewsHandler(new TranslateService(),new DeepLTranslateService());
    }
    private final Set<String> processedContentHashes = new HashSet<>();

    public boolean isDuplicateNews(String title, String preview, String url) {
        String normalizedContent =normalizeUrl(title + " " + preview);
        String contentHash = generateHash(normalizedContent);
        if (processedContentHashes.contains(contentHash)) {
            return true;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        processedContentHashes.add(contentHash);
        return false;
    }
    private String generateHash(String content) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(content.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hashBytes);
        } catch (NoSuchAlgorithmException e) {
            return Integer.toString(content.hashCode());
        }
    }


    public String cleanTitle(String title) {
        return title.replaceAll("\\(\\d+\\)", "")          // –£–¥–∞–ª–µ–Ω–∏–µ (60)
                .replaceAll("\\|.*$", "")              // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ |
                .replaceAll("Lees verder$", "")        // –£–¥–∞–ª–µ–Ω–∏–µ "Lees verder"
                .replaceAll("Voor school$", "")        // –£–¥–∞–ª–µ–Ω–∏–µ "Voor school"
                .trim();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é
    public String cleanPreviewText(String text) {
        return text.replaceAll("Lees.*$", "")     // –£–¥–∞–ª–µ–Ω–∏–µ "Lees verder..."
                .replaceAll("Voor school.*$", "")     // –£–¥–∞–ª–µ–Ω–∏–µ "Voor school..."
                .trim();
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
    public String translateContent(String text, String sourceLang) {
        if (text == null || text.isBlank()) return "";

        return newsHandler.deepLTranslateService.translateText(text, sourceLang, "ru");
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    public String formatMessage(String title, String preview, String url) {
        String sourceEmoji = newsHandler.getSourceEmoji(url);
        return String.format(
                "üì¢ <b>%s</b>\n\nüìñ %s\n\nüîó <a href='%s'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n%s",
                title,
                preview,
                url,
                sourceEmoji
        );
    }
    public String normalizeUrl(String url) {
        try {
            URI uri = new URI(url);
            String host = uri.getHost();

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è telegraaf.nl
            if (host != null && host.contains("telegraaf.nl")) {
                String[] parts = uri.getPath().split("/");
                for (String part : parts) {
                    if (part.matches("\\d+")) {
                        return uri.getScheme() + "://" + host + "/financieel/" + part;
                    }
                }
            }
            return uri.getScheme() + "://" + host + uri.getPath();

        } catch (Exception e) {
            return url; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        }
    }

}
