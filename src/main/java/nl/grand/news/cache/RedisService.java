package nl.grand.news.cache;

import lombok.AllArgsConstructor;
import lombok.Data;
import redis.clients.jedis.Jedis;

import java.time.LocalDateTime;
import java.util.concurrent.ScheduledExecutorService;


import java.net.URI;


@Data
public class RedisService {

    private final Jedis redis;

    public RedisService() {
        this.redis = createJedis();

        try {
            String pingResponse = redis.ping();
            System.out.println("‚úÖ Redis ping: " + pingResponse);
            System.out.println("üì¶ Redis keys count: " + redis.dbSize());
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:");
            e.printStackTrace();
        }
    }

    private Jedis createJedis() {
        String redisUrl = System.getenv("REDIS_URL");
        if (redisUrl != null && !redisUrl.isEmpty()) {
            try {
                URI uri = new URI(redisUrl);
                return new Jedis(uri);
            } catch (Exception e) {
                throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –ø–æ REDIS_URL", e);
            }
        } else {
            System.out.println("‚ÑπÔ∏è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ localhost:6379");
            return new Jedis("localhost", 6379);
        }
    }

    public void markNewsAsSent(String url) {
        redis.setex(url, 172800, "1"); // 2 –¥–Ω—è
    }

    public boolean isNewsAlreadySent(String normalizedUrl) {
        System.out.println(LocalDateTime.now() + " üîç Checking Redis for URL: " + normalizedUrl);
        boolean exists = redis.exists(normalizedUrl);
        System.out.println(LocalDateTime.now() + " ‚úÖ Check result: " + exists);
        return exists;
    }

    public void shutdown(ScheduledExecutorService scheduler) {
        scheduler.shutdownNow();
        redis.close();
        System.out.println("üõë Redis stopped");
    }
}
