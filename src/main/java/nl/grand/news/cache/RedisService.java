package nl.grand.news.cache;

import lombok.Data;

import java.time.LocalDateTime;
import java.util.concurrent.ScheduledExecutorService;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.concurrent.ScheduledExecutorService;
import java.net.URI;


@Data
public class RedisService {

    private final Cache<String, Boolean> cache;

    public RedisService() {
        this.cache = Caffeine.newBuilder()
                .expireAfterWrite(Duration.ofSeconds(345600)) // 4 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                .maximumSize(10_000) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                .build();

        System.out.println("‚úÖ Caffeine Cache initialized");
        System.out.println("üì¶ Estimated cache size: " + cache.estimatedSize());
    }

    public void markNewsAsSent(String url) {
        cache.put(url, true);
        System.out.println(LocalDateTime.now() + " ‚ûï Cached URL: " + url);
    }

    public boolean isNewsAlreadySent(String normalizedUrl) {
        System.out.println(LocalDateTime.now() + " üîç Checking cache for URL: " + normalizedUrl);
        boolean exists = cache.getIfPresent(normalizedUrl) != null;
        System.out.println(LocalDateTime.now() + " ‚úÖ Check result: " + exists);
        return exists;
    }

    public void shutdown(ScheduledExecutorService scheduler) {
        scheduler.shutdownNow();
        cache.cleanUp(); // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        System.out.println("üõë Caffeine Cache stopped");
    }
}
